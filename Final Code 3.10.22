/----------------------------------------------------------------------------/
/* /
/ Module: main.cpp /
/ Author: VEX /
/ Created: Thu Sep 26 2019 /
/ Description: Competition Template /
/ /
/----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

controller Controller1;
motor RightFront = motor(PORT19,true);
motor LeftFront = motor(PORT2);
motor RightBack = motor(PORT10,true);
motor LeftBack = motor(PORT20);
motor Claw = motor(PORT8);
motor Elevator = motor(PORT4);
motor TowerLift = motor(PORT7);
motor_group Left = motor_group(LeftFront,LeftBack);
motor_group Right = motor_group(RightFront,RightBack);
drivetrain Drivetrain = drivetrain(Left,Right);

void F100 (){
Drivetrain.setDriveVelocity(75, percentUnits::pct);
Drivetrain.driveFor(fwd, 105, distanceUnits::in);
}

void R50 () {
Drivetrain.setDriveVelocity(75, percentUnits::pct);
Drivetrain.driveFor(directionType::rev, 100, distanceUnits::in);
}
void R40 (){
Drivetrain.setDriveVelocity (75, percentUnits::pct);
Drivetrain.driveFor(directionType::rev, 40, distanceUnits::in);
}

void UnfoldA (){
Elevator.spinFor(1.9, timeUnits::sec, 60, velocityUnits::pct);
}

void UnfoldB (){
Elevator.spinFor(0.6, sec, 60, velocityUnits::pct);
}

void Fold (){
Elevator.spinFor(directionType::rev, 2, timeUnits::sec, 60, velocityUnits::pct);
}

void TL90 (){
Drivetrain.turnFor(-90, degrees);
}
void LiftLower (){
TowerLift.spinFor(fwd, 0.5, timeUnits::sec);
}

void ClawRelease () {
Claw.rotateFor(directionType::rev, 50, rotationUnits::deg);
}

void Right45 (){
Drivetrain.turnFor(35, degrees);
}

void Left45 (){
Drivetrain.turnFor(-35, degrees);
}

/---------------------------------------------------------------------------/
/* Pre-Autonomous Functions /
/ /
/ You may want to perform some actions before the competition starts. */
/nction. You must return from this function /
/ or the autonomous and usercontrol tasks will not be started. This /
/ function is only called once after the V5 has been powered on and /
/ not every time that the robot is disabled. /
/---------------------------------------------------------------------------/

void pre_auton(void) {
// Initializing Robot Configuration. DO NOT REMOVE!
vexcodeInit();

// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}

/---------------------------------------------------------------------------/
/* /
/ Autonomous Task /
/ /
/ This task is used to control your robot during the autonomous phase of /
/ a VEX Competition. /
/ /
/ You must modify the code to add your own robot specific commands here. /
/---------------------------------------------------------------------------*/

void autonomous(void) {
R50();
Left45();
F100();
Right45();
R50();

Right45();

TowerLift.spinFor(directionType::fwd, 20, rotationUnits::rev);
Claw.spinFor(directionType::fwd, 110, rotationUnits::deg);
Drivetrain.turn(right);
F100();
ClawRelease();
Drivetrain.driveFor(fwd, 10, inches);
Drivetrain.turn(left);

}

// ..........................................................................

/---------------------------------------------------------------------------/
/* /
/ User Control Task /
/ /
/ This task is used to control your robot during the user control phase of /
/ a VEX Competition. /
/ /
/ You must modify the code to add your own robot specific commands here. /
/---------------------------------------------------------------------------*/

void usercontrol(void) {
// User control code here, inside the loop
while (1) {

  LeftFront.spin(directionType::fwd,(Controller1.Axis3.value() + Controller1.Axis4.value()),velocityUnits::pct);
  LeftBack.spin(directionType::fwd,(Controller1.Axis3.value() + Controller1.Axis4.value()),velocityUnits::pct);
  RightFront.spin(directionType::fwd,(Controller1.Axis3.value() - Controller1.Axis4.value()),velocityUnits::pct);
  RightBack.spin(directionType::fwd,(Controller1.Axis3.value() - Controller1.Axis4.value()),velocityUnits::pct);

 if (Controller1.ButtonL2.pressing()) {
     TowerLift.spin(directionType::fwd,60,velocityUnits::pct);
  }
 else if (Controller1.ButtonL1.pressing()) {
     TowerLift.spin(directionType::rev,60,velocityUnits::pct);
  }
  else{
       TowerLift.stop(hold);
  }
 if (Controller1.ButtonUp.pressing()) {
     Elevator.spin(directionType::rev,60 ,velocityUnits::pct);
  }
 else if (Controller1.ButtonDown.pressing()) {
     Elevator.spin(directionType::fwd,60,velocityUnits::pct);
  }
 else{
     Elevator.stop(hold);
 }
 if (Controller1.ButtonR1.pressing()) {
   Claw.spin(directionType::rev, 60, velocityUnits::pct);
 }
 else if (Controller1.ButtonR2.pressing()){
   Claw.spin(directionType::fwd, 60, velocityUnits::pct);
 }
 else {
   Claw.stop(hold);
 }

wait(20, msec); // Sleep the task for a short amount of time to
                // prevent wasted resources.
}
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
// Set up callbacks for autonomous and driver control periods.
Competition.autonomous(autonomous);
Competition.drivercontrol(usercontrol);

// Run the pre-autonomous function.
pre_auton();

// Prevent main from exiting with an infinite loop.
while (true) {
wait(100, msec);
}
}
